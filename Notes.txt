Section 1 : Getting Started

- Introduction
? Fundamental Concepts
? Creating concepts
? Browing project history
? Branching & merging
? Collaborating using Github
? Rewriting history

- What is git
? Popular version control system
? Version control system 
Records changes made to code over time in a database
called repository.
History : who has made what changes and when
? Track History, Work Together
? 2 types of VCS
Centralized :
All team members connect to center server to get latest copy
and share changes with others. E.g. : Subersion, Team Foundation Server
Problem is, single point of failure, i.e., central server
Distributed :
Every member have copy of the project and history, so snapshots are saved locally
Can synchronize work directly with others
E.g. : Git, Mercurial
? Git : Free, open source, super fast, scalable, cheap branching/merging
? More than 90% of project uses git.

- Using git
? The command line : fastest, easiest
? Code editors & IDEs
? VSCode : extension - GitLens
? Graphical User Interfaces
GitKraken, Sourcetree
GUI tools have limitations
GUI tools are not always available

- Installing git
? Check git version : git --version

- Configuring git
? Config - Name (user.name), Email (user.email),
Default Editor (core.editor "code --wait"),
Line Ending (core.autocrlf) :
crlf - carriage return line feed
Windows uses - cr+lf, Linux/macos - lf
In windows setting will be - true
In linux/macOs for removing cr on storing,
setting will be - input
? e.g. - git config --global user.name "Mosh Hamedani"
? Level : 
System - All users,
Global - All repo of the current user,  git config --global
Local - The current repo
? Configuration settings are store in text file (.gitconfig),
open it as :
git config --global -e

- Getting Help
? search online : git config
? on termial : get <option> --help, git <option> -h
------------------------------------------------------------------------------

Section 2 : Creating Snapshots

- Initialize a repository
? git init
? ls -a : listing all files including hidden
? .git folder has
foldes : branches, hooks, info, objects, refs
files : config, description, HEAD
? Terminal app : zsh with git plugin

- Git workflow
? Create/Modify files > Add to staging area > Create commit
? Staging area also called as Index
? Staging area used to review work
? Changes can be unstaged.
? Staging area is not empty after commiting changes.
It is similar to commited snapshot.
? Commit has
ID - generated by git
Message, Date/time, Author, Complete snapshot.
? Git compresses content and doesn't store duplicate content.

- Staging files
? Adding files to staging area
git add file1 file2 ... / git add *.txt
For all files : git add . 
? echo hello > file : writes to file
? echo hello >> file : appends to file
? Adding files to staging area copies files to it.

- Committing changes
? git commit -m "message"
? If commit message is long then use
git commit, then default editor will open to write message for commit.
Ideally : first line is short description (<80 chars), then after line break 
type long description. 
lines starting with # will be ignored.

- Committing best practices
? Commit shouldn't be too big or small. (update of a file, feature wise)
? Commit often.
? Each commit should represent logical separate chain set.
? Fixing bug and type should be in different commits
? Create meaningful commit messages
? Wording : Present or Past tense.

- Skipping the staging area
? Not needing review
? git commit -a -m "message" or 
git commit -am "message"
? -a is for all modified files.

- Removing files
? Delete file then > git add > commit it.
? Files in staging area : git ls-files
? git command for removing files
git rm <filenames or patterns>
Removes both from directory and staging area.

- Renaming or moving files
? Rename/remove > git add (for deletion and addition) > commit it
? After staging, git recognizes renaming of files.
? git command for renaming/moving files
git mv currentfilename targetfilename
Renaming/moving is applied to both working directory and staging area 

- Ignoring files
? Create .gitignore file in root of project
? Add files and directories to it as
logs/
main.log
*.log
? It only work when file are not included in repository.
? Untracking files
Remove file from staging area : git rm --cached -r filename
Then commit it
? github.com/github/gitignore, gitignore templates

- Short status
? git status -s
left column : staging area
right column : working directory
? - untracked, M - modified, A - added

- Viewing staged and unstaged changes
? git diff --staged
between staged area and last commit
? git diff
between working directory and staging area
? Output
1. diff --get a/file1.js b/file1.js 
diff utility was called with args. a is old (in commit) b in (staging area)
2. index badfb70...47c3216 100644 <- Meta data
3. --- a/file1.js
+++b/file1.js
legend, changes in old copy by minus and new copy by plus sign
When no old copy exists then we see --- /dev/null
4. @@ -1,3 +1,5 @@
header with info about changed parts of file
It has line no (from to to)
it gives context to chunk.
git divides file in chunks and shows them with header, with
changed lines
5. hello
world
test
+sky
+ocean
part of a chunk. added line shown with plus and deleted with 
minus.


- Visual diff tools
? Diff Tools
KDiff3, P4Merge, WinMerge (Windows Only), VSCode
? Making VSCode default diff tool
Giving name : git config --global diff.tool vscode
Launch VSCode :
git config --global difftool.vscode.cmd "code --wait --diff $LOCAL $REMOTE"
LOCAL : old file placeholder, REMOTE : new file placeholder.
? View / edit configuration file
git config --global -e
Correct command part in the file, as placeholders are lost.
? Using tool
Working dir vs staging area : git difftool
staging area vs last commit : git difftool --staged

- Viewing history
? git log
identifier : 40 char hex string unique identifier
HEAD to master
Author, Date time, description
space to go to next page
? git log --oneline
Short summary
unique identifier with 7 chars
HEAD to master
one line description
? git log --oneline --reverse
first to last order

- Viewing a commit
? show command (shows diff)
Reference using identifier
git show <some identifier chars>
Reference using HEAD pointer
git show HEAD~<steps to go back>
? viewing final version in a commit
git show HEAD~steps:<path to file>
? Viewing all files in commit
git ls-tree HEAD~steps
? Files represented using blobs, and dirs using tree in git database.
? Viewing objects (files / dirs) in git database
git show <some identifier chars>
Objects can be : commits, blobs, trees and tags

- Unstaging files
? Restoring staging area
git restore --staged <filenames.. or patterns or period for all>
? Restore command takes copy from the next environment
for staging : last commit,
for working dir : staging area.

- Discarding local changes
? Restoring working directory
git restore <filenames.. or patterns or period for all>
? File from staging area is copied to working dir.
? It doesn't work for untracked files
? Force clean is required to remove new untracked files
git clean -fd (force and directories)

- Restoring a file to an earlier version
? By default git restores for next environment
If not in staging area then last commit.
? git restore --source=HEAD~steps <filepath>
source is commit where file will be copied from.
New untracked file will be created.

- Creating snapshots with vscode
? Source panel shows similar to output of status command

- Creating snapshots with gitkraken
? gitkraken is only a gui tool.
? Open repository
? It has
List of commits, Author, Message, Date time
? More details click on commit
commit id, message, author, date time,
summary of changes (list/tree view, view all files)
? Getting diff 
click on file in summary of changes
Diff view and file view
In Diff view : split, inline and hunk view
? Changes can be staged / unstaged / viewed / committed.








